AWSTemplateFormatVersion: '2010-09-09'
Description: Create VPC, Subnets, EFS with Access points and EC2 with the EFS mounted.

Parameters:
  EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String
      Default: EFS_EC2
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the EC2 with mounted Access Point
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  VPCCIDR:
      Description: The IP range (CIDR notation) for the VPC
      Type: String
      Default: 10.0.0.0/16
  AMItoUse:
      Description: Name of the AMI to use
      Type: String
      Default: ""
  AccessPointPath:
      Description: Root directory for all connections to this access point
      Type: String
      Default: "/efs"
  BucketSourceName:
    Description: Name of the Bucket that will hold the source code of the lambda function
    Type: String
    Default: ""
  BucketOutName:
    Description: Name of the Bucket that will hold the source code of the lambda function
    Type: String
    Default: ""

Resources:
  MountTargetVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref VPCCIDR
      Tags:
      - Key: Application
        Value: !Join ["-", [!Ref EnvironmentName, AWS::StackId]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value: !Join ["-", [!Ref EnvironmentName, AWS::StackName]]
      - Key: Network
        Value: Public

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MountTargetVPC
      InternetGatewayId:
        Ref: InternetGateway

  MountTargetSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref MountTargetVPC
      AvailabilityZone: !Join ["", [!Ref "AWS::Region","a"]]
      MapPublicIpOnLaunch: true

  MountTargetSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref MountTargetVPC
      AvailabilityZone: !Join ["", [!Ref "AWS::Region","b"]]
      MapPublicIpOnLaunch: true

  MountTargetSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref MountTargetVPC
      AvailabilityZone: !Join ["", [!Ref "AWS::Region","c"]]
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MountTargetVPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref MountTargetSubnetOne

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref MountTargetSubnetTwo

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref MountTargetSubnetThree
  
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: MountTargetVPC
      GroupName: EfsMountedEC2SG
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: MountTargetVPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
 
  FileSystemResource:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: MLInferenceFileSystem

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref MountTargetSubnetOne
      SecurityGroups:
      - !Ref MountTargetSecurityGroup

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref MountTargetSubnetTwo
      SecurityGroups:
      - !Ref MountTargetSecurityGroup

  MountTargetResource3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref MountTargetSubnetThree
      SecurityGroups:
      - !Ref MountTargetSecurityGroup
 
  AccessPointResource:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      AccessPointTags:
        - Key: Name
          Value: MLInferenceAccessPoint
      FileSystemId: !Ref FileSystemResource
      PosixUser:
        Uid: "1001"
        Gid: "1001"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1001"
          OwnerUid: "1001"
          Permissions: "755"
        Path: !Ref AccessPointPath

  EfsMountEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m5.xlarge
      ImageId: !Ref "AMItoUse"
      KeyName: !Ref "KeyName"
      SecurityGroupIds:
      - !Ref InstanceSecurityGroup
      SubnetId: !Ref MountTargetSubnetOne
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50

    DependsOn:
      - FileSystemResource
      - AccessPointResource
      - MountTargetResource1

  S3SourceBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Ref BucketSourceName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
  S3OutBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Ref BucketOutName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True

  # VPC endpoint needed. Else Lambda will try to access S3 via internet resulting in a timeout.
  # Check the following two exchanges:
  # https://stackoverflow.com/questions/69011881/botocore-exceptions-connecttimeouterror-connect-timeout-on-endpoint-url
  # https://stackoverflow.com/questions/39779962/access-aws-s3-from-lambda-within-vpc
  # Over the internet is avoided, hence a VPC endpoint is created.
  # AWS cloudformation API documentation can be found here:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpoint.html#cfn-ec2-vpcendpoint-privatednsenabled
  VPCS3endPoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal: "*"
            Action:
              - "*"
            Resource:
              - 'arn:aws:s3:::*'
      VpcEndpointType: 'Gateway'
      RouteTableIds:
        - !Ref PublicRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref MountTargetVPC

# Output exports for cross-stack referencing
# Do not change the order. Some outputs are indexed in queries in file \.circleci\config.yml.
# TODO. Make queries more sophisticated
Outputs:
  FileSystemID:
    Description: File system ID
    Value: !Ref FileSystemResource
    Export:
      Name: !Sub "${AWS::StackName}-FileSystemID"
  AccessPointID:
    Description: Access Point ID
    Value: !Ref AccessPointResource
    Export:
      Name: !Sub "${AWS::StackName}-AccessPointID"
  DefaultSecurityGroup:
    Description: Default Security Group
    Value: !GetAtt MountTargetVPC.DefaultSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-DefaultSecurityGroup"
  MountTargetSubnetOne:
    Description: Subnet 1 in the VPC
    Value: !Ref MountTargetSubnetOne
    Export:
      Name: !Sub "${AWS::StackName}-MountTargetSubnetOne"
  MountTargetSubnetTwo:
    Description: Subnet 2 in the VPC
    Value: !Ref MountTargetSubnetTwo
    Export:
      Name: !Sub "${AWS::StackName}-MountTargetSubnetTwo"
  MountTargetSubnetThree:
    Description: Subnet 3 in the VPC
    Value: !Ref MountTargetSubnetThree
    Export:
      Name: !Sub "${AWS::StackName}-MountTargetSubnetThree"
  MountTargetVPC:
    Description: The Mount Target VPC Id
    Value: !Ref MountTargetVPC
    Export:
      Name: !Sub "${AWS::StackName}-MountTargetVPC"
  EC2IP:
    Description: The EC2 Instance IP
    Value: !GetAtt EfsMountEC2Instance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-EC2InstanceID"
  SubnetIds:
    Description: Subnets used by cluster
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-join.html
    Value: !Join
        - ','
        - - !Ref MountTargetSubnetOne
          - !Ref MountTargetSubnetTwo
          - !Ref MountTargetSubnetThree
    Export:
        Name: !Sub "${AWS::StackName}-SubnetIds"
  AccessPointARN:
    Description: Access Point ARN
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-accesspoint.html
    Value: !GetAtt AccessPointResource.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AccessPointARN"
  S3SourceBucketName:
    Description: S3 Source Bucket ID
    Value: !Ref S3SourceBucket
    Export:
      Name: !Sub "${AWS::StackName}-S3SourceBucketID"
  S3OutBucketName:
    Description: S3 Out Bucket ID
    Value: !Ref S3OutBucket
    Export:
      Name: !Sub "${AWS::StackName}-S3OutBucketID"